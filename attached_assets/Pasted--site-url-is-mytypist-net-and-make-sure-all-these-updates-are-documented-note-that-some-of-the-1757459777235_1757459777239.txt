## site url is mytypist.net
and make sure all these updates are documented

note that some of these request are already fixed so be careful to know the already implemented so you dont folishly create.edit/delete important files and connections
Okay i love what you have been doing soo far but i need these improvements.

1. Now Unsure you go through the whole project code to find all aspect that needs improvements because i told you before, am a non developer so i am actually trusting on you to  build as a senior grade programmer and ux ui experienced professional. so any flars you smooth at this point would aslo be fixed because me myself who is unexperience can already see alot of errors like inconsistent implementations, incomplete and non-production ready code examples, i want the platform very build so when people see it in action they think that a whole big team built the website, thats how good i want it, so dont let me down for any reason.

    a. I wont be reviewing all the codes so i need everything to be ready without me having to go oncomment and set it, so when going through all the codes make sure everything is production ready, like i was going through some code and seeing things commented and like saying

    ( 
    # I stimulated this, USe real Implementations on production
    # TODO: Add admin permission check
    # This would integrate with Redis INFO command , # optional or implement in production and other cache metrics in production, # Cache cleanup if Redis is available,    # TODO: Remove this endpoint in production or add admin-only access
    # In production, this would integrate with payment gateway #For now, we'll simulate successful payment
    # Note: In production, this would have additional authorization checks
    # and might require admin approval for certain transaction types
    # In a real implementation, this would
    # This would integrate with actual monitoring tools
    # For now, return simulated metrics
    # This is a simplified collaborative filtering approach
    # In production, you'd want to use more sophisticated algorithms
    # In production, this would integrate with a GeoIP service like MaxMind
    # For now, return mock data or None
    # Mock location data for demonstration
    # In production, use actual GeoIP lookup
    # In production, you would use a GeoIP database like MaxMind
    # For now, return None values
    # In production, this would:
    # 1. Send email/SMS alerts to admins
    # 2. Post to security monitoring systems
    # 3. Trigger automated responses
    # In production, you would store this in database with user_id mapping
    # For now, we'll encode user_id in the key for simplicity
    # This would typically use Redis for rate limiting
    # For now, we'll return True (no rate limiting)
    # In production, implement proper rate limiting logic
    # In production, you would maintain a blacklist of tokens
    # or use a different approach like token versioning
    # For now, this is a placeholder
    # Maintenance task to clean up expired tokens
    # Would be called by a background task
    # In production, retrieve from secure key store
    # For now, generate deterministic key from ID
    # In production, this would:
    # 1. Generate new keys
    # 2. Re-encrypt data with new keys
    # 3. Update key references
    # 4. Securely dispose of old keys

    # For now, this is a placeholder
    # Placeholder for SMS implementation
    # Integrate with SMS provider like Twilio, Nexmo, etc.
    # Placeholder for push notification implementation
    # Integrate with Firebase Cloud Messaging, Apple Push Notification, etc.

    # In production, integrate with:
    # - ClamAV for virus scanning
    # - YARA rules for pattern matching
    # - Cloud-based scanning services

    # This would generate actual PDF using libraries like ReportLab or WeasyPrint
    # For now, return base64 encoded placeholder

    # Convert to PDF (this would need python-docx2pdf or similar)
    # For now, return DOCX stream (PDF conversion can be added)

    # Implement condition checking logic here
    # For example: time-based conditions, IP restrictions, etc.
    return True  # Simplified for now

      # In production, integrate with:
    # - Email alerts
    # - Slack notifications
    # - PagerDuty
    # - SIEM systems

    # TODO: Store individual rating record for user
    # This would prevent duplicate ratings from same user

    # For PostgreSQL, run different optimizations


def generate_document_thumbnail(file_path: str) -> str:
    """Generate thumbnail for document file"""

# This would implement actual thumbnail generation
# For now, return placeholder
    return f"{file_path}.thumbnail.png"



def attempt_subscription_renewal(db: Session, subscription: Subscription) -> bool:
    """Attempt to renew subscription"""

    try:
        # Create renewal payment
        from app.schemas.payment import PaymentCreate
        from app.models.payment import PaymentMethod

        payment_data = PaymentCreate(
            amount=subscription.amount,
            currency="NGN",
            description=f"Subscription renewal - {subscription.plan.value}",
            payment_method=PaymentMethod.CARD  # Default to card
        )

        payment = PaymentService.create_payment(db, payment_data, subscription.user_id)

        # Initialize payment with Flutterwave
        # This would typically involve stored payment methods
        # For now, we'll simulate the process

        # If successful, extend subscription



def send_payment_success_notification(user: User, payment: Payment):
    """Send payment success notification"""

    # In production, this would integrate with email/SMS service
    print(f"Payment success notification sent to {user.email}")
    print(f"Payment amount: {payment.currency} {payment.amount}")

    # TODO: Implement actual email/SMS sending
    # EmailService.send_payment_success_email(user.email, payment)


def send_payment_failure_notification(user: User, payment: Payment):
    """Send payment failure notification"""

    # In production, this would integrate with email/SMS service
    print(f"Payment failure notification sent to {user.email}")
    print(f"Payment amount: {payment.currency} {payment.amount}")

    # TODO: Implement actual email/SMS sending
    # EmailService.send_payment_failure_email(user.email, payment)


def send_subscription_renewal_notification(user: User, payment: Payment):
    """Send subscription renewal notification"""

    # In production, this would integrate with email/SMS service
    print(f"Subscription renewal notification sent to {user.email}")
    print(f"Renewal amount: {payment.currency} {payment.amount}")

    # TODO: Implement actual email/SMS sending
    # EmailService.send_subscription_renewal_email(user.email, payment)
)


    theres no sms configuration so no need, but i need the Firebase Cloud Messaging, Apple Push Notification configurations to be working like are you crazy mostly the mock data being used instead of real intergrations & TODO that have not been done, i dont even need any development stage because am not a developer, like this aspect is very important bacause they are lots of code commented in the code base, i wnat te actual advanced logics used where comments like this are ow where you know actually dont work now, if you know its optional and i wont ned it you can ingnore but now something as important as a service or email i need you to bring the project to production stage. like i just saw something like this (# Remove this for local development) you would totally remove the comment as we are actually building production ready code.

    b. am seeing something that you are gettting wrong  (# TODO: Check if user is authorized to sign this document # This would involve checking signature requests or permissions)
     and thats the signature, understand that signature is just a placeholder just like names and others but the only difeernt it has is that instead of just a input it get a file upload signature canvas (drag/upload/snap) then the system gets just the actual signature removing backgrounfd if there is especially for image uploaded signatures so i need good implementation logics to fix this and make it work, admin who has different placeholder behavior option type espcially for a unique placeholder like _address, _image, _signature will have  option like saying a specific address should have break on commma logic and just the one he selects, even if thers another address on the document, it will have its own styling but the user just need to write one address and the backend is tasked with handling them indivdially so hwlp me boost the logic, for example signature or image can have pixel (x & y) parameters for admin to specify, i need you to understand Another thing am seeing are routes, files and feautures confusions because i dont know if is me that is inexperience or you coding rubbish, because am seeing route names like "/api/auth/login",  /api/v2/auth, /api/v2/auth/login on one project amd even seeing things lilke enhanced which i think is very stupid, this is mytypist first ever version, even when i dont know if any of the endpoints are working, like are ou crazy, why would i want a auth routes and also have a enhanced_auth routes is that not stupid, the auth was supposed to be upgraded and making sure all the files connected to it works properly and well upgraded too to handle current version, not just creating new important but dublicate files, besides the fact that am seeing v2 on my project is making me angry, especially the fact that i know that their contents are what i love, but you created new files in some senerios instead of upgrading current ones and checking if they work, even Template marketplace v2.0 even when it is what i want the naming and routes even the v2 alone in its name is stupid making me know that a wrong thing has been done because that is actaully suppose to be my template listing or market but i am having a feeling that ithey are now clashing with templates and i am confused, it all started on that page (docs\ENHANCEMENT_SUMMARY.md) all i wanted was an update of current codes but you went to create new file and i think routes, services even files which we meant to have been a update of formal existing onces  i dont need clashing or repetative endpoints that will spoil the output and backend files communications, thats why i need any enhancement to be joint or upgraded not a new file or dublicate created everytime so make sure you scan the whole back properly for those type of things and fix all their connections. please i didnt say you shold just delete/remove the advances contents, but actually implement them properly to main codebase without dublications or errors and making sure they work with the current file and all communications work well and besides am seeing things like verify-2fa and api keys i just hope is not what am thinking, because this is a statup company & MVP am building here i am not interested yet in selling api keys or that sort of advance intergation for now its just me and my users.

    c. after making sure all the codebase is okay check/test/fix all routes and removing dependecies & files and things that are no longer need or considered (dublicated), now i dont know Why am i seeing sqlite database, i dont want it at all anymore at all, all i need now is postgres just increase the allround performance of the postgres to its maximum so we can use just it as our only go to database.

    d. Since the last update where the backend guy foolishly created new files that already exist and callig them advanced, instead of updating old codes, he made a lot of mess to the structure because now i am seeing doc folder having more than 10 files ow does that even make sense, am not asking you to also ack foolish and delete does page because some are very important thats why i need you to first work on merging the code base and removing stupid errors just like that v2, them after you do that you will understand the project and know now to minimize the numbers of docs marking downs, but ensure that they are all complete (as long as possible not leaving a single thing behind, make sure they contained more than detailed and performance intergation improvements & suggestions especially for frontend) and detail, i will give a suggestion of the final ones i want [Readme (complete comprehensive project documenation), Full Api Documentation, frontend documentation (react vite integration), Full backend documentation(make sure you talk about all the feauture and tools), Complete Payment & Finance Documentation, Full Database Doc, Full Complete Setup-Guide/Deploy/Configuration/notes Documentation, and Feautures & Usage Documentation(for all roles and how the website and all flow works)]

    e. i want roles to be guest, user, moderator then admin
